/*
 * Copyright (C) 2024 Davide Zamblera
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef BLADE_FORCE_MODEL_HH_
#define BLADE_FORCE_MODEL_HH_

#include "ConfigClasses.hpp"
#include "DataClasses.hpp"

namespace simulation
{
    /**
     * @brief Base class for blade force models.
     * 
     * This class provides the foundation for computing the forces and torques generated by rotor blades
     * based on pitch, inflow, body dynamics, flapping, and rotor shaft state.
     */
    class BladeForceModel
    {
        
        public:
            RotorConfig* rotor; ///< Pointer to the rotor configuration.

            /**
             * @brief Constructor for BladeForceModel.
             * 
             * @param config Pointer to a RotorConfig object that defines the rotor configuration.
             */
            explicit BladeForceModel(RotorConfig* config)
            : rotor(config) {}

            /**
             * @brief Virtual destructor.
             * 
             * Ensures proper cleanup in derived classes.
             */
            virtual ~BladeForceModel() = default;

            BladeForceState bladeForceState; ///< State of the blade forces and torques.

            /**
             * @brief Compute the blade forces and torques.
             * 
             * This method computes the forces and torques acting on the rotor blades based on the provided
             * pitch, inflow, body dynamics, flapping, and rotor shaft state.
             * 
             * @param pitchState State of the blade pitch.
             * @param inflowState State of the inflow.
             * @param bodyState State of the body dynamics.
             * @param flappingState State of the blade flapping.
             * @param shaftState State of the rotor shaft.
             * @param rho Air density (unit: kg/m^3).
             * 
             * @return BladeForceState object representing the computed forces and torques acting on the blades.
             */
            virtual BladeForceState computeState(const PitchState& pitchState, const InflowState& inflowState, const BodyState& bodyState, const FlappingState &flappingState, const RotorShaftState &shaftState, double rho);

            
    };
}


#endif // BLADE_FORCE_MODEL_HH_